body {
  /* Se no computador da pessoa tiver o "Arial", o "Arial" será exibido, se não, o "Helvetica" será inserido, e, se não existir nenhuma das duas, uma tipografia genérica sans-serif será exibida. */

  font-family: Arial, Helvetica, sans-serif;

  margin: 0px;

  background: #f7f7f7;

  display: grid;

  /* O "gap" será aplicado entre os filhos de primeiro nível do "body", que está definido com o "display: grid". */

  gap: 60px;

  /* Estamos alinhando todos os elementos do Grid ao centro do componente "body". */

  justify-items: center;

  margin-top: 60px;
}

img {
  /* Com essa propriedade, a imagem não vai crescer mais do que o tamanho da tela. */

  max-width: 100%;
  display: block;
}

a {
  text-decoration: none;
}

p,
h1,
h2,
h3 {
  /* Estamos resetando os estilos da margem. */

  margin: 0px;
}

p {
  font-size: 20px;
  line-height: 1.3;
}

.menu {
  display: flex;

  /* O "flex-wrap" permitirá que os botões quebrem e que o layout se torne responsivo. */

  flex-wrap: wrap;

  /* Sempre que os botões forem quebrados, eles serão alinhados ao centro. */

  justify-content: center;

  gap: 20px;
}

.menu a {
  background-color: #ffffff;
  padding: 15px 30px;
  border-radius: 4px;
  color: #000000;

  text-transform: uppercase;
}

.conteudo {
  display: grid;

  grid-template-columns: 1fr 1fr;

  /* Estamos definindo um limite para o conteúdo. Quando ele alcançar 1000px, o conteúdo parará de crescer e ele será alinhado ao centro, por causa que, no "body", definimos o "justify-items: center" */

  max-width: 1000px;
}

.introducao {
  background: #fff;
  padding: 40px;
  text-align: right;

  display: grid;

  position: relative;

  align-content: center;
  gap: 20px;
  justify-items: end;
}

.detalhe {
  width: 60px;
  height: 4px;
  background: #e21;

  /* Por padrão, o "display" do "span" é "inline", então não conseguimos definir as propriedades do Box Model para ele. Se alterarmos para "inline-block", conseguimos definir essas propriedades. */

  /* No exemplo abaixo, como definimos o elemento-pai como "display: grid", esse elemento não precisará mais ter o "display: inline-block", pois ele se tornou um elemento de grid e passou a poder receber valores de "width" e "height". */

  /* display: inline-block; */

  position: absolute;

  top: 30px;
  right: -30px;
}

.botao {
  background: #e21;
  color: #fff;
  border-radius: 4px;

  text-transform: uppercase;
}

.subtitulo {
  font-size: 64px;
  text-transform: uppercase;
  color: rgba(0, 0, 0, 0.5);

  text-align: right;
  padding: 40px;

  /* Estamos alinhando o próprio item ao centro. */
  align-self: center;
}

.vantagens {
  background: #fff;
  padding: 40px;
}

.vantagens-item {
  display: grid;
  grid-template-columns: auto 1fr;

  /* O primeiro valor sempre terá a distância entre as linhas, enquanto que o segundo valor sempre terá a distância entre as colunas. */

  gap: 10px 20px;

  padding: 20px;
}

.vantagens-item p {
  grid-column: 2;
}

.rodape {
  background: #fff;
  width: 100%;
  text-align: center;
  padding: 40px;

  /* Ao inserirmos a propriedade "box-sizing: border-box", estamos dizendo que esse elemento não somará o "padding" e nem o "border", respeitando apenas o tamanho do "width". */

  box-sizing: border-box;
}
